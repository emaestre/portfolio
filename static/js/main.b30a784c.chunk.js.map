{"version":3,"sources":["components/about/About.js","components/home/Home.js","components/thumbnail/Thumbnail.js","components/projects/Projects.js","components/app/App.router.js","components/app/App.js","serviceWorker.js","index.js","assets/alaska-4714097_1280.jpg"],"names":["About","props","react_default","a","createElement","Home","Thumbnail","link","image","title","className","react_router_dom","to","src","alt","Projects","thumbnail_Thumbnail","alaskaImg","AppRouter","react_router","exact","path","component","Header","Layout","Content","Footer","Sider","App","_useState","useState","_useState2","Object","slicedToArray","isCollapsed","setIsCollapsed","handleCollapse","useCallback","collapsed","layout","width","collapsible","onCollapse","menu","theme","mode","defaultSelectedKeys","Item","key","UserOutlined","VideoCameraOutlined","UploadOutlined","App_router","Boolean","window","location","hostname","match","ReactDOM","render","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports","__webpack_require__","p"],"mappings":"0TAUeA,MARf,SAAeC,GACX,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,qBCKGC,MARf,SAAcJ,GACV,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,2BCkBGE,MAnBf,SAAmBL,GAAO,IACdM,EAAuBN,EAAvBM,KAAMC,EAAiBP,EAAjBO,MAAOC,EAAUR,EAAVQ,MAErB,OACIP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,aACXR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,GAAIL,GACNL,EAAAC,EAAAC,cAAA,OAAKM,UAAU,6BACXR,EAAAC,EAAAC,cAAA,OACIM,UAAU,mBACVG,IAAKL,EACLM,IAAI,aAGZZ,EAAAC,EAAAC,cAAA,OAAKM,UAAU,oBAAoBD,uBCApCM,MAbf,SAAkBd,GACd,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACY,EAAD,CACIT,KAAK,aACLC,MAAOS,IACPR,MAAM,uBCKPS,MAVf,WACI,OACIhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACIjB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,aAAaC,UAAWjB,IAC1CH,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,sBAAsBC,UAAWP,IACnDb,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOE,KAAK,mBAAmBC,UAAWtB,MCA9CuB,UAAmCC,IAAnCD,QAAQE,EAA2BD,IAA3BC,QAASC,EAAkBF,IAAlBE,OAAQC,EAAUH,IAAVG,MAgFlBC,MA7Ef,WAAe,IAAAC,EAC2BC,oBAAS,GADpCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACJK,EADIH,EAAA,GACSI,EADTJ,EAAA,GAGLK,EAAiBC,sBAAY,SAAAC,GAC/BH,EAAeG,IAChB,IAEH,OACIpC,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACIT,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAQ7B,UAAU,eACdR,EAAAC,EAAAC,cAACuB,EAAD,CACIa,MAAM,MACN9B,UAAU,aACV+B,aAAW,EACXH,UAAWJ,EACXQ,WAAYN,GAEZlC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,cACfR,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CACIC,MAAM,OACNC,KAAK,SACLC,oBAAqB,CAAC,KACtBpC,UAAU,aAEVR,EAAAC,EAAAC,cAACuC,EAAA,EAAKI,KAAN,CAAWC,IAAI,IAAIvC,MAAM,QACrBP,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,MACA/C,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACID,UAAU,sBACVE,GAAG,cAFP,UAQRV,EAAAC,EAAAC,cAACuC,EAAA,EAAKI,KAAN,CAAWC,IAAI,IAAIvC,MAAM,YACrBP,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,MACAhD,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACID,UAAU,sBACVE,GAAG,uBAFP,cAQRV,EAAAC,EAAAC,cAACuC,EAAA,EAAKI,KAAN,CAAWC,IAAI,IAAIvC,MAAM,SACrBP,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,MACAjD,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACID,UAAU,sBACVE,GAAG,oBAFP,aAUhBV,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAQ7B,UAAU,eACdR,EAAAC,EAAAC,cAACmB,EAAD,CAAQb,UAAU,uCACdR,EAAAC,EAAAC,cAAA,uCAEJF,EAAAC,EAAAC,cAACqB,EAAD,CAASf,UAAU,gBACfR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,kDACXR,EAAAC,EAAAC,cAACgD,EAAD,QAGRlD,EAAAC,EAAAC,cAACsB,EAAD,CAAQhB,UAAU,eAAlB,+CCtEA2C,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZZC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD8HzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,KAAK,SAAAC,GACFA,EAAaC,eAEhBC,MAAM,SAAAC,GACHC,QAAQD,MAAMA,EAAME,+BE1IpCC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.b30a784c.chunk.js","sourcesContent":["import React from 'react';\n\nfunction About(props) {\n    return (\n        <div>\n            <h1>About</h1>\n        </div>\n    );\n}\n\nexport default About;\n","import React from 'react';\n\nfunction Home(props) {\n    return (\n        <div>\n            <h1>Home</h1>\n        </div>\n    );\n}\n\nexport default Home;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Thumbnail.scss';\n\nfunction Thumbnail(props) {\n    const { link, image, title } = props;\n\n    return (\n        <div className=\"Thumbnail\">\n            <Link to={link}>\n                <div className=\"Thumbnail__imageContainer\">\n                    <img\n                        className=\"Thumbnail__image\"\n                        src={image}\n                        alt=\"Project\"\n                    />\n                </div>\n                <div className=\"Thumbnail__title\">{title}</div>\n            </Link>\n        </div>\n    );\n}\n\nexport default Thumbnail;\n","import React from 'react';\nimport Thumbnail from '../thumbnail';\nimport alaskaImg from '../../assets/alaska-4714097_1280.jpg';\n\nfunction Projects(props) {\n    return (\n        <div>\n            <h1>Projects</h1>\n            <Thumbnail\n                link=\"/portfolio\"\n                image={alaskaImg}\n                title=\"Twitter Newsfeed\"\n            />\n        </div>\n    );\n}\n\nexport default Projects;\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport About from '../about';\nimport Home from '../home';\nimport Projects from '../projects';\n\nfunction AppRouter() {\n    return (\n        <Switch>\n            <Route exact path=\"/portfolio\" component={Home} />\n            <Route exact path=\"/portfolio/projects\" component={Projects} />\n            <Route path=\"/portfolio/about\" component={About} />\n        </Switch>\n    );\n}\n\nexport default AppRouter;\n","import React, { useState, useCallback } from 'react';\nimport { BrowserRouter as Router, Link } from 'react-router-dom';\nimport { Layout, Menu } from 'antd';\nimport {\n    UserOutlined,\n    UploadOutlined,\n    VideoCameraOutlined,\n} from '@ant-design/icons';\nimport AppRouter from './App.router';\nimport './App.scss';\n\nconst { Header, Content, Footer, Sider } = Layout;\n\n// TODO: Try to create a Menu component to reduce the App complexity\nfunction App() {\n    const [isCollapsed, setIsCollapsed] = useState(false);\n\n    const handleCollapse = useCallback(collapsed => {\n        setIsCollapsed(collapsed);\n    }, []);\n\n    return (\n        <Router>\n            <Layout className=\"App__layout\">\n                <Sider\n                    width=\"500\"\n                    className=\"App__sider\"\n                    collapsible\n                    collapsed={isCollapsed}\n                    onCollapse={handleCollapse}\n                >\n                    <div className=\"App__logo\" />\n                    <Menu\n                        theme=\"dark\"\n                        mode=\"inline\"\n                        defaultSelectedKeys={['1']}\n                        className=\"App__menu\"\n                    >\n                        <Menu.Item key=\"1\" title=\"Home\">\n                            <UserOutlined />\n                            <span>\n                                <Link\n                                    className=\"App__menu-item-link\"\n                                    to=\"/portfolio\"\n                                >\n                                    Home\n                                </Link>\n                            </span>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\" title=\"Projects\">\n                            <VideoCameraOutlined />\n                            <span>\n                                <Link\n                                    className=\"App__menu-item-link\"\n                                    to=\"/portfolio/projects\"\n                                >\n                                    Projects\n                                </Link>\n                            </span>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\" title=\"About\">\n                            <UploadOutlined />\n                            <span>\n                                <Link\n                                    className=\"App__menu-item-link\"\n                                    to=\"/portfolio/about\"\n                                >\n                                    About\n                                </Link>\n                            </span>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Layout className=\"App__layout\">\n                    <Header className=\"App__header App__layout--background\">\n                        <h1>Eleazar Maestre D' Armas</h1>\n                    </Header>\n                    <Content className=\"App__content\">\n                        <div className=\"App__content-container App__layout--background\">\n                            <AppRouter />\n                        </div>\n                    </Content>\n                    <Footer className=\"App__footer\">\n                        Copyright &copy; 2020 by Eleazar Maestre.\n                    </Footer>\n                </Layout>\n            </Layout>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './components';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/alaska-4714097_1280.5b4f4a60.jpg\";"],"sourceRoot":""}